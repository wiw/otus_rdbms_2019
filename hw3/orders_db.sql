-- MySQL Script generated by MySQL Workbench
-- 01/29/19 14:11:11
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `mydb` DEFAULT CHARACTER SET utf8 ;
USE `mydb` ;

-- -----------------------------------------------------
-- Table `mydb`.`db_order`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`db_order` (
  `client` CHAR(255) CHARACTER SET 'utf8' NOT NULL,
  `table` INT NOT NULL,
  `order_composition` CHAR(255) CHARACTER SET 'utf8' NOT NULL,
  `price_of_each_dish` FLOAT NOT NULL,
  `count` INT NOT NULL,
  `order_start` TIMESTAMP NOT NULL,
  `order_end` TIMESTAMP NOT NULL,
  `waiter` CHAR(255) CHARACTER SET 'utf8' NOT NULL,
  `bill` FLOAT NOT NULL,
  `payment_method` CHAR(255) CHARACTER SET 'utf8' NOT NULL,
  `discount` FLOAT NULL,
  `tips` FLOAT NULL,
  PRIMARY KEY (`client`, `waiter`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`discounts`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`discounts` (
  `discount_id` TINYINT(100) UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Количество возможных вариантов скидок скорее всего не превысит 100, но при этом и не должно быть отрицательным\nHigh cardinality',
  `discount_method` TINYTEXT CHARACTER SET 'utf8' NOT NULL DEFAULT '' COMMENT 'Описание каждого варианта скидки может уложиться в 255 символов. При этом оно должно быть уникальным\nHigh cardinality',
  `discount_value` DECIMAL(1,4) UNSIGNED NOT NULL DEFAULT 0.0000 COMMENT 'Значение скидки применяемое к данному методу. Используется для денежных расчетов, тип поля DECIMAL. Normal cardinality.',
  PRIMARY KEY (`discount_id`),
  UNIQUE INDEX `discount_method_UNIQUE` (`discount_method` ASC),
  UNIQUE INDEX `discount_id_UNIQUE` (`discount_id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`clients`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`clients` (
  `client_id` INT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Количество клиентов может быть большое, но не должно быть отрицательным или равно Null, поэтому тип поля INT с количеством вариантов 2*(2^32)\nHigh cardinality.',
  `discount_id` TINYINT(100) UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Low cardinality',
  PRIMARY KEY (`client_id`),
  INDEX `discount_id_idx` (`discount_id` ASC),
  UNIQUE INDEX `client_id_UNIQUE` (`client_id` ASC),
  CONSTRAINT `discount_id`
    FOREIGN KEY (`discount_id`)
    REFERENCES `mydb`.`discounts` (`discount_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`waiters`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`waiters` (
  `waiter_id` MEDIUMINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Идентификатор официанта. Не может быть отрицательным. Максимальное значение 16777215. С учетом большой \"текучки\" кадров и сохранения данных о всех сотрудниках\nHigh cardinality',
  `waiter_name` NVARCHAR(1000) CHARACTER SET 'utf8' NOT NULL DEFAULT 'Иванов Иван Иванович' COMMENT 'Для полного имени официанта достаточно 1000 символов в кодировке UTF8\nNormal  cardinality',
  PRIMARY KEY (`waiter_id`),
  UNIQUE INDEX `waiter_id_UNIQUE` (`waiter_id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`restaurant_tables`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`restaurant_tables` (
  `table_id` TINYINT(255) UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Количество столиков даже в больших ресторанах не превышает 200. Для текущей задачи 255 идентификаторов столов достаточно. Идентификатор не должен быть отрицательным\nHigh  cardinality',
  `seats_number` TINYINT(255) UNSIGNED NOT NULL DEFAULT 1 COMMENT 'Количество доступных мест. Поскольку столы могут быть достаточно обширными, то количество мест ограничено до 255. Не должно быть отрицательным\nLow  cardinality',
  `status` TINYINT(1) NOT NULL DEFAULT 1 COMMENT 'Свободен (1) столик или занят (0). Low cardinality. Тип поля TINYINT(1)',
  PRIMARY KEY (`table_id`),
  UNIQUE INDEX `table_id_UNIQUE` (`table_id` ASC),
  INDEX `table_status_idx` (`status` ASC)  COMMENT 'Индекс нужен для выборки и поиска свободных столиков')
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`payment_methods`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`payment_methods` (
  `pm_id` TINYINT(100) UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Количество возможных методов оплаты не может превысить ста (100). Не должно быть отрицательным.\nHigh cardinality',
  `pm_name` TINYTEXT CHARACTER SET 'utf8' NOT NULL DEFAULT '' COMMENT 'Минимально допустимое поле для описания метода оплаты. Должно быть уникальным.\nHigh cardinality',
  `pm_tax` DECIMAL(1,4) UNSIGNED NOT NULL DEFAULT 0.2000 COMMENT 'Размер налоговой ставки для выбранного метода оплаты. Может отличаться в случае наличного или безналичного расчета - в этом случае может добавляться комиссия банка. Ставка не может быть отрицательной, normal cardinality, тип поля DECIMAL  для точных расчетов',
  PRIMARY KEY (`pm_id`),
  UNIQUE INDEX `pm_name_UNIQUE` (`pm_name` ASC),
  UNIQUE INDEX `pm_id_UNIQUE` (`pm_id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`orders`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`orders` (
  `order_id` INT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Идентификатор заказа. Количество заказов также может быть большим, поэтому поле типа INT. Не должно быть отрицательным\nHigh cardinality',
  `client_id` INT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Идентификатор клиента. Количество возможных вариантов 2*(2^32). Не должно быть отрицательным.\nLow cardinality',
  `table_id` TINYINT(255) UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Low cardinality',
  `order_start` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() COMMENT 'Дата и время начала заказа. Временная зона стандартизирована и указывается в UTC+0. В конкретное время конвертируется в соответствиии временной зоной по умолчанию принятой в текущей базе данных.  Если ничего не указано то будет записана текущая временая метка\nNormal cardinality',
  `order_end` TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP() + INTERVAL 1 HOUR COMMENT 'Дата и время конца заказа. Если ничего не указано то будет записана текущая временая метка + 1 час\nNormal cardinality',
  `waiter_id` TINYINT(255) UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Low cardinality',
  `bill` DECIMAL(10,4) UNSIGNED NOT NULL DEFAULT 0,0000 COMMENT 'Общая стоимость заказа, находится в поле типа DECIMAL с 10 символами до запятой и 4 символами после запятой. Не должна быть отрицательной. Расчитывается по следующей формуле для конкретного заказа и конкретного клиента:\nстоимость блюда * количество данного блюда в заказе -> сумма стоимости всех блюд в заказе * размер скидки для данного клиента.\nNormal cardinality',
  `payment_method_id` INT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Low cardinality',
  `tip` DECIMAL(10,4) UNSIGNED NOT NULL DEFAULT 0,0000 COMMENT 'Чаевые офоцианту, находится в поле типа DECIMAL с 10 символами до запятой и 4 символами после запятой. Не должна быть отрицательной\nNormal cardinality',
  `active` TINYINT(1) UNSIGNED NOT NULL DEFAULT 1 COMMENT 'Активный (1) или завершенный заказ (0). Low cardinality.',
  PRIMARY KEY (`order_id`),
  INDEX `waiter_id_idx` (`waiter_id` ASC),
  INDEX `table_id_idx` (`table_id` ASC),
  INDEX `payment_method_id_idx` (`payment_method_id` ASC),
  UNIQUE INDEX `order_id_UNIQUE` (`order_id` ASC),
  INDEX `client_id_idx` (`client_id` ASC),
  INDEX `active_idx` (`active` ASC)  COMMENT 'Индекс необходим для быстрой выборки активных заказов',
  CONSTRAINT `waiter_id`
    FOREIGN KEY (`waiter_id`)
    REFERENCES `mydb`.`waiters` (`waiter_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `table_id`
    FOREIGN KEY (`table_id`)
    REFERENCES `mydb`.`restaurant_tables` (`table_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `payment_method_id`
    FOREIGN KEY (`payment_method_id`)
    REFERENCES `mydb`.`payment_methods` (`pm_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `client_id`
    FOREIGN KEY (`client_id`)
    REFERENCES `mydb`.`clients` (`client_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`dishes`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`dishes` (
  `dish_id` SMALLINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Число возможных блюд не превысит 65536 позиций, не должно быть отрицательным\nHigh cardinality',
  `dish_name` NVARCHAR(4000) CHARACTER SET 'utf8' NOT NULL DEFAULT '' COMMENT 'Для описания поля наименования блюда достаточно 4000 символов кодировке UTF8\nNormal cardinality',
  `dish_cost` DECIMAL(10,4) UNSIGNED NOT NULL DEFAULT 0,0000 COMMENT 'Стоимость блюда хранится в поле типа DECIMAL с десятью знаками до запятой и четырьмя знаками после. Не должно быть отрицательным\nNormal cardinality',
  PRIMARY KEY (`dish_id`),
  UNIQUE INDEX `dish_id_UNIQUE` (`dish_id` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `mydb`.`order_line`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `mydb`.`order_line` (
  `order_line_id` BIGINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Строка в заказе, их количество может быть очень большим, поэтому используется поле типа BIGINT. Не должно быть отрицательным\nHigh cardinality',
  `order_id` INT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Low cardinality',
  `dish_id` SMALLINT UNSIGNED NOT NULL DEFAULT 0 COMMENT 'Low cardinality',
  `count_item` DECIMAL(5,1) UNSIGNED NOT NULL DEFAULT 1 COMMENT 'Количество возможных позиций одного блюда в заказе. Дробное, с одним знаком после запятой. Не может быть больше чем 99999,9.  Не должно быть отрицательным. Поскольку это поле необходимо для точного расчета суммы заказа, используется тип поля DECIMAL\nLow cardinality',
  PRIMARY KEY (`order_line_id`),
  INDEX `order_id_idx` (`order_id` ASC),
  INDEX `dish_id_idx` (`dish_id` ASC),
  UNIQUE INDEX `order_line_id_UNIQUE` (`order_line_id` ASC),
  CONSTRAINT `order_id`
    FOREIGN KEY (`order_id`)
    REFERENCES `mydb`.`orders` (`order_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `dish_id`
    FOREIGN KEY (`dish_id`)
    REFERENCES `mydb`.`dishes` (`dish_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
